В отличие от списков во многих языках программирования, списки Python также 
могут содержать элементы разных типов; элементом списка может быть любой 
объект Python.

Чтобы создать список, заключите перечень элементов, разделенных запятыми, 
в квадратные скобки [].

страница 71 в книге Python_Express-kurs_3-e_iz_-_Naomi_Seder_2019

Методы:
--------------------------------------
.append() - присоединение элемента к списку, в его конец
--------------------------------------
.insert()  - вставляет новый элемент списка между двумя существующими элементами или в начало списка
>>> x = [1, 2, 3]
>>> x.insert(2, "hello")
>>> print(x)
[1, 2, 'hello', 3]
--------------------------------------
del - удаление элементов списков или сегментов В общем случае команда del list[n] эквивалентна list[n:n+1] = [], тогда как 
команда del list[m:n] делает то же самое, что list[m:n] = []
>>> x = ['a', 2, 'c', 7, 9, 11]
>>> del x[1]
>>> x
['a', 'c', 7, 9, 11]
>>> del x[:2]
>>> x
[7, 9, 11]
--------------------------------------
.remove() - ищет первый экземпляр заданного значения в списке и удаляет это значение из списка.Если метод remove не находит удаляемых 
элементов, он выдает ошибку. Вы можете  перехватить ошибку, используя средства обработки исключений Python, или же 
предотвратить саму проблему, проверяя наличие элементов в списке оператором in перед тем, как пытаться их удалить.
>>> x = [1, 2, 3, 4, 3, 5]
>>> x.remove(3)
>>> x
[1, 2, 4, 3, 5]
>>> x.remove(3)
>>> x
[1, 2, 4, 5]
>>> x.remove(3)
-------------------------------------
.reverse() метод изменения списка — эффективно переставляет элементы списка в обратном порядке «на месте»
>>> x = [1, 3, 5, 6, 7]
>>> x.reverse()
>>> x
[7, 6, 5, 3, 1] 
------------------------------------
.min(),.max() используются для нахождения наименьшего и наибольшего элемента в списке.
------------------------------------
.index() метод ищет в списке элемент, эквивалентный заданному значению, и возвращает позицию этого элемента.
при попытке определить позицию несуществующего 
элемента происходит ошибка. Эта ошибка обрабатывается точно так же, как и аналогичная ошибка, которая может 
происходить при вызове remove (то есть проверкой списка оператором in перед вызовом index).
>>> x = [1, 3, "five", 7, -2]
>>> x.index(7)
3
------------------------------------
.count() проводит поиск заданного значения по списку, но вместо позиционной информации возвращает количество вхождений в список.
>>> x = [1, 2, 2, 3, 5, 2, 5]
>>> x.count(2)
3
>>> x.count(5)
2
>>> x.count(4)
0
