страница 80 в Python_Express-kurs_3-e_iz_-_Naomi_Seder_2019.pdf
-------------------------------------------(in)
Чтобы легко определить, присутствует ли некоторое значение в списке, воспользуйтесь оператором in, возвращающим логическое значение. Также можно выполнить 
обратную проверку с оператором not in:
>>> 3 in [1, 3, 4, 5]
True
>>> 3 not in [1, 3, 4, 5]
False
>>> 3 in ["one", "two", "three"]
False
>>> 3 not in ["one", "two", "three"]
True
--------------------------------------------(конкатицнация +)
Чтобы создать список слиянием двух существующих списков, используйте оператор + (оператор конкатенации списков), который оставляет исходные спискиаргументы без изменений:
>>> z = [1, 2, 3] + [4, 5]
>>> z
[1, 2, 3, 4, 5]
--------------------------------------------(инициализация *)
Оператор * создает список заданного размера, инициализированный заданным 
значением. Эта операция типична для больших списков, размер которых известен 
заранее. И хотя вы можете использовать append для добавления элементов и автоматического расширения списка по мере необходимости, эффективнее будет 
использовать * для определения правильного размера списка в начале работы программы. Если размер списка остается неизменным, это позволяет избежать затрат 
на перемещение данных в памяти:
>>> z = [None] * 4
>>> z
[None, None, None, None]